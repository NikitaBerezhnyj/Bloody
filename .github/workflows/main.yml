name: Build and Release Bloody

permissions:
  contents: write

on:
  push:
    branches:
      - prod
  pull_request:
    branches:
      - prod

jobs:
  build-android:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: "stable"

      - name: Get dependencies
        run: flutter pub get

      - name: Build APK
        run: flutter build apk --release

      - name: Build AAB (optional)
        run: flutter build appbundle --release

      - name: Extract version from pubspec.yaml
        id: get_version
        run: |
          VERSION=$(grep '^version:' pubspec.yaml | cut -d ' ' -f2 | cut -d '+' -f1)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Prepare artifacts
        run: |
          mkdir -p dist
          VERSION=${{ steps.get_version.outputs.version }}
          cp build/app/outputs/flutter-apk/app-release.apk dist/Bloody-${VERSION}.apk
          cp build/app/outputs/bundle/release/app-release.aab dist/Bloody-${VERSION}.aab || true

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: bloody-build
          path: dist/*

  release:
    runs-on: ubuntu-latest
    needs: build-android

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: bloody-build
          path: ./artifacts

      - name: Get version
        id: get_version
        run: |
          VERSION=$(grep '^version:' pubspec.yaml | cut -d ' ' -f2 | cut -d '+' -f1)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create or update GitHub Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION=${{ steps.get_version.outputs.version }}

          gh release create "$VERSION" \
            --title "Bloody v$VERSION" \
            --notes "Automated release build" || true

          for file in ./artifacts/*; do
            gh release upload "$VERSION" "$file" --clobber
          done
